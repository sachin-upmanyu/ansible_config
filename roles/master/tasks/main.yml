
#install pip packages
- pip: name=redis state=present
- pip: name=service_identity state=present
- pip: name=scrapy state=present
- pip: name=pymongo state=latest




# MySQL

- name: install MySQL
  apt: name="{{ item }}" state=latest
  with_items:
    - mysql-server
    - mysql-client
    - python-mysqldb
    - php5-mysql

- name: add mysql user
  mysql_user: name="{{ MY_USER }}" host="{{ item }}" password="{{ MY_PASS }}" priv=*.*:ALL,GRANT login_user="{{ MY_LOGIN_USER }}" login_password="{{ MY_LOGIN_PASS }}"
  with_items:
    - '%'
    - localhost

- name: make sure mysql is running
  action: service name=mysql state=started enabled=true


# remove database if exist, insert new data
- name: delete database first
  mysql_db: name="{{ item }}" state=absent login_user="{{ MY_USER }}" login_password="{{ MY_PASS }}"
  with_items:
    - "{{ DB_NAME }}"

# create mysql DBs
- name: create mysql databases
  mysql_db: name="{{ item }}" state=present login_user="{{ MY_USER }}" login_password="{{ MY_PASS }}"
  with_items:
    - "{{ DB_NAME }}"



# Copy database dump file to remote host and restore it to database
- copy: src="{{ DB_FROM }}" dest="{{ DB_TO }}"
- mysql_db: name="{{ DB_NAME }}" state=import target="{{ DB_TO }}"/"{{ DB_SQL }}" login_user="{{ MY_USER }}" login_password="{{ MY_PASS }}"


# install php mongo driver
- name: install php mongo driver
  shell: printf "\n" | pecl install mongo


# php.ini mongo configuration entry
- name: add mongo extension to php.ini configuration
  lineinfile: dest={{ item }} line="extension=mongo.so" state=present
  with_items:
    - /etc/php5/apache2/php.ini
    - /etc/php5/cli/php.ini

- service: name=apache2 state=restarted

# download python mysql driver
- name: Download python mysql driver
  get_url:
    url="{{ PY_MY_DRIVER_FROM }}"
    dest="{{ PY_MY_DRIVER_TO }}"

# install python mysql driver
- name: Install python mysql driver
  apt: deb="{{ PY_MY_DRIVER_TO }}" state=present


# make sure code directory exists
- name: Make sure that code directory exists
  action: file path="{{ CODE_DIR_TO }}" state=directory

# transfer master code
- synchronize: src="{{ CODE_DIR_FROM }}"/ dest="{{ CODE_DIR_TO }}"/


######################################  redis server start ##################################################

# make sure redis config directory exists
- name: Make sure that /opt directory exists
  action: file path=/opt/redis-stable state=directory

#download redis server
- name: download redis-stable
  get_url: url=http://download.redis.io/redis-stable.tar.gz dest=/opt/redis-stable.tar.gz

# extract redis server
- name: extract redis server
  unarchive: src=/opt/redis-stable.tar.gz dest=/opt/ copy=no

# change dir and install redis server
- name: Go to the folder and execute command
  command: chdir=/opt/redis-stable make install

# make sure redis config directory exists
- name: Make sure that redis config directory exists
  action: file path=/etc/redis state=directory

# make sure redis data directory exists
- name: Make sure that redis data directory exists
  action: file path=/var/redis/6379 state=directory

# copy init script to startup
- name: copy init script to startup
  command: cp /opt/redis-stable/utils/redis_init_script /etc/init.d/redis_6379

# copy config to /etc
- name: copy config to /etc
  command: cp /opt/redis-stable/redis.conf /etc/redis/6379.conf

# ensure demonize
- name: ensure demonized in config
  lineinfile: dest=/etc/redis/6379.conf regexp='daemonize\s*no\s*' line='daemonize yes' state=present backrefs=yes

# ensure pidfile
- name: ensure pidfile in config
  lineinfile: dest=/etc/redis/6379.conf regexp='pidfile\s*/var/run/redis.pid\s*' line='pidfile /var/run/redis_6379.pid' state=present backrefs=yes

# ensure logfile path
- name: ensure logfile path in config
  lineinfile: dest=/etc/redis/6379.conf regexp='logfile\s*\"\"\s*' line='logfile /var/log/redis_6379.log' state=present backrefs=yes

# ensure data dir
- name: ensure data dir path in config
  lineinfile: dest=/etc/redis/6379.conf regexp='dir\s*\./\s*' line='dir /var/redis/6379' state=present backrefs=yes

# update inits
- name: add init script to all runlevels
  command: update-rc.d redis_6379 defaults

# start redis server
- name: start redis service
  command: /etc/init.d/redis_6379 start

######################################  redis server end ##################################################
